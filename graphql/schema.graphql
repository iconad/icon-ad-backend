"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    # projects(page: Int!, status: String @where(status: "like") ): [Project]  @paginate
    # projects(page: Int, status: String @eq orderBy: [OrderByClause!] @orderBy): [Project!]! @paginate(type: "paginator" model: "App\\Project")
    projects(page: Int, status: String @eq orderBy: [OrderByClause!] @orderBy): [Project!]! @where(status: "like") @paginate(type: "paginator" model: "App\\Project")

    # GetAllProjects: [Project]
    featuredProjects(featured: Boolean! @eq orderBy: [OrderByClause!] @orderBy): [Project] @paginate(defaultCount: 12)
    project(slug: ID @eq): Project @find
    nextProject(id: ID @eq): Project
    prevProject(id: ID @eq): Project
    featuredCasestudies: [Project!]!

    categories: [Category] @all
    category(slug: ID @eq): Category @find

    slides: [Slide] @all
    SlidesByOrder: [Slide]
    BackgroundVideo: [Slide]

    clients(orderBy: [OrderByClause!] @orderBy): [Client] @all
    featuredClients(featured: Boolean! @eq): [Client] @paginate(defaultCount: 4)
    featuredRandomClients: [Client]

    campaigns: [Campaign] @paginate(defaultCount: 6)
    featuredCampaigns(featured: Boolean! @eq): [Campaign] @paginate(defaultCount: 3)
    campaign(slug: ID @eq): Campaign @find

    services: [Category] @all
    featuredServices(featured: Boolean! @eq): [Category] @paginate(defaultCount: 8)
    featuredRandomServices(num: Int): [Category]
    service(slug: ID @eq): Category @find


}

type Contact {
    id: ID!
    name: String!
    email: String!
    phone: String!
    message: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}


type Project {
    id: ID!
    title: String!
    slug: String!
    sub_title: String
    summary: String
    cover_text: String
    detail: String
    thumbnail: String
    cover: String
    images: String
    video: String
    status: String
    location: String
    order: Int
    casestudy: Boolean
    featured: Boolean,
    categories: [Category] @belongsToMany
    campaigns: [Campaign] @hasMany
    client: Client @hasOne
}

type Category {
    id: ID!
    name: String
    short_name: String
    slug: String!
    summary: String!
    detail: String
    image: String
    featured: Boolean
    projects: [Project] @belongsToMany
}

type Slide {
    id: ID!
    title: String!
    detail: String!
    image: String
    video: String
    color: String
    order: Int
}

type Campaign {
    id: ID!
    title: String!
    slug: String!
    summary: String!
    detail: String
    video: String
    thumbnail: String
    images: String
    featured: Boolean,
    project: Project @hasOne
}

type Client {
    id: ID!
    name: String!
    slug: String!
    logo: String
    logo_white: String
    featured: Boolean,
}


type Service {
    id: ID!
    title: String!
    slug: String!
    summary: String!
    detail: String
    image: String
    featured: Boolean,
}


input OrderByClause{
    field: String!
    order: SortOrder!
}


enum SortOrder {
    ASC
    DESC
}
